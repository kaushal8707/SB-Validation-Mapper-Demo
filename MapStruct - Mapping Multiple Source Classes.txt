				MapStruct - Mapping Multiple Source Classes
				===========================================
				
**** // while we are fetching data from multiple tables and want to return data as a single DTO as a responseDTO

postman
============

Req- 
	GET    http://localhost:8082/employee-details/2


Resp-

{
    "empId": 2,
    "empName": "amplifier",
    "email": "amp@gmail.com",
    "salary": 6671.0,
    "deptId": "2",
    "deptName": "Business"
}


controller
===============

    // while we are fetching data from multiple tables and want to return data as a single DTO as a responseDTO
    @GetMapping("/employee-details/{id}")
    public ResponseEntity<EmployeeDetailsDTO> getEmployeeDetailsById(@PathVariable("id") Long id) {
        return ResponseEntity.ok(employeeService.getEmployeeDetailsById(id));
    }

---------------------------------------

@Data
public class EmployeeDetailsDTO {

    private Long empId;
    private String empName;
    private String email;
    private float salary;
    private String deptId;
    private String deptName;

}

---------------------------------------------

@Entity
@Table(name = "employee")
@Data
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;

    @Column(name = "name")
    private String name;

    @Column(name = "email")
    private String email;

    @Column(name = "salary")
    private float salary;

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name ="dept_id",foreignKey = @ForeignKey(name = "emp_dept_fk"))
    private Department department;

}

-------------------------------------------------


@Entity
@Table(name = "department")
@Data
public class Department {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "dept_id")
    private Long id;

    @Column(name = "deptName")
    private String deptName;

    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL)
    private List<Employee> employees;
}

--------------------------------------------------

@Mapper(componentModel = "spring")
public interface EmployeeDetailsMapper {

    @Mapping(source = "employee.id", target = "empId")
    @Mapping(source = "employee.name", target = "empName")
    @Mapping(source = "department.id", target = "deptId")
    @Mapping(source = "department.deptName", target = "deptName")
    EmployeeDetailsDTO toEmployeeDetailsDTO(Employee employee, Department department);
}


--------------------------------------------------

// while we are fetching data from multiple tables and want to return data as a single DTO as a responseDTO
    public EmployeeDetailsDTO getEmployeeDetailsById(Long id) {
        return employeeRepository.findById(id)
                .map(emp->{
                    return employeeDetailsMapper.toEmployeeDetailsDTO(emp, emp.getDepartment());
                }).orElse(new EmployeeDetailsDTO());
    }
}


