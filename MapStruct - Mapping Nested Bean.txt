				MapStruct - Mapping Nested Bean
				
			=======================================
			
http://localhost:8082/employee/2

Req:-


{
   "empName": "amplifier",
   "email": "amp@gmail.com",
   "salary": 6671,
   "departmentDTO": {
       "deptName":"Business"
   }
}


Resp:-

{
    "empId": 2,
    "empName": "amplifier",
    "email": "amp@gmail.com",
    "salary": 6671.0,
    "departmentDTO": {
        "id": 2,
        "deptName": "Business"
    }
}

----------------------------------------------------------

@RestController
public class EmployeeController {

    @Autowired
    EmployeeService employeeService;

    @PostMapping("/employee")
    public ResponseEntity<Employee> saveEmployee(@RequestBody EmployeeDTO employeeDTO) {
        return ResponseEntity.ok(employeeService.saveEmployee(employeeDTO));
    }

    @GetMapping("/employee/{id}")
    public ResponseEntity<EmployeeDTO> getEmployeeById(@PathVariable("id") Long id) {
        return ResponseEntity.ok(employeeService.getEmployeeById(id));
    }
	
---------------------------------------------------------

public class EmployeeDTO {

    private Long empId;
    private String empName;
    private String email;
    private float salary;
    //private String departmentName;  //  How we can pass child elements directly and map from dto to entity using mapStruts ...this case we need to test it separately
    private DepartmentDTO departmentDTO;
}

---------------------------------------------------------

@Data
public class DepartmentDTO {

    private Long id;
    private String deptName;
}

---------------------------------------------------------

@Entity
@Table(name = "employee")
@Data
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;

    @Column(name = "name")
    private String name;

    @Column(name = "email")
    private String email;

    @Column(name = "salary")
    private float salary;

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name ="dept_id",foreignKey = @ForeignKey(name = "emp_dept_fk"))
    private Department department;

}
---------------------------------------------------------

@Entity
@Table(name = "department")
@Data
public class Department {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "dept_id")
    private Long id;

    @Column(name = "deptName")
    private String deptName;

    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL)
    private List<Employee> employees;
}

---------------------------------------------------------

@Mapper(componentModel = "spring", uses = {DepartmentMapper.class})
public interface EmployeeMapper {
    @Mapping(source = "empId", target = "id")
    @Mapping(source = "empName", target = "name")
    //@Mapping(source="departmentName",target="department.deptName")  // when departmentName is a direct field inside EmployeeDTO
    @Mapping(source = "departmentDTO", target = "department")
    Employee toEntity(EmployeeDTO employeeDTO);

    @Mapping(source = "id", target = "empId")
    @Mapping(source = "name", target = "empName")
    //@Mapping(source="department.deptName",target="departmentName")  // when departmentName is a direct field inside EmployeeDTO
    @Mapping(source = "department", target = "departmentDTO")
    EmployeeDTO toDTO(Employee employee);
}

---------------------------------------------------------

@Mapper(componentModel = "spring")
public interface DepartmentMapper {
    Department toEntity(DepartmentDTO departmentDTO);
    DepartmentDTO toDTO(Department department);
}



	